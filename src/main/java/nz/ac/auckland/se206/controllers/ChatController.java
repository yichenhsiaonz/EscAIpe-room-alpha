package nz.ac.auckland.se206.controllers;

import java.io.IOException;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.ProgressBar;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import nz.ac.auckland.se206.App;
import nz.ac.auckland.se206.GameState;
import nz.ac.auckland.se206.SceneManager.AppUi;
import nz.ac.auckland.se206.gpt.ChatMessage;
import nz.ac.auckland.se206.gpt.GptPromptEngineering;
import nz.ac.auckland.se206.gpt.openai.ApiProxyException;
import nz.ac.auckland.se206.gpt.openai.ChatCompletionRequest;
import nz.ac.auckland.se206.gpt.openai.ChatCompletionResult;
import nz.ac.auckland.se206.gpt.openai.ChatCompletionResult.Choice;
import nz.ac.auckland.se206.speech.TextToSpeech;

/** Controller class for the chat view. */
public class ChatController {
  @FXML private TextArea chatTextArea;
  @FXML private TextField inputText;
  @FXML private Button sendButton;
  @FXML private ProgressBar chatTimer;
  private String popupTitle;
  private String popupBody;
  private TextToSpeech voice = new TextToSpeech();
  private ChatCompletionRequest chatCompletionRequest;

  /**
   * Initializes the chat view, loading the riddle.
   *
   * @throws ApiProxyException if there is an error communicating with the API proxy
   */
  @FXML
  public void initialize() throws IOException, ApiProxyException {
    try {
      chatTimer.progressProperty().bind(App.timerTask.progressProperty());
      // get the riddle answer that was generated by App class
      String instanceRiddleAnswer = App.firstRiddleAnswer;

      // start the chat as a task
      javafx.concurrent.Task<Void> promptTask =
          new javafx.concurrent.Task<>() {
            @Override
            protected Void call() throws Exception {
              // set the parameters for the GPT model
              chatCompletionRequest =
                  new ChatCompletionRequest()
                      .setN(1)
                      .setTemperature(0.2)
                      .setTopP(0.5)
                      .setMaxTokens(100);
              // send the prompt
              runGpt(
                  new ChatMessage(
                      "user", GptPromptEngineering.getRiddleWithGivenWord(instanceRiddleAnswer)));
              return null;
            }
          };
      // begin running the task on a background thread
      new Thread(promptTask).start();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  /**
   * Appends a chat message to the chat text area.
   *
   * @param msg the chat message to append
   */
  private void appendChatMessage(ChatMessage msg) {
    chatTextArea.appendText(msg.getRole() + ": " + msg.getContent() + "\n\n");
  }

  /**
   * Runs the GPT model with a given chat message.
   *
   * @param msg the chat message to process
   * @return the response chat message
   * @throws ApiProxyException if there is an error communicating with the API proxy
   */
  private void runGpt(ChatMessage msg) throws ApiProxyException, IOException {
    // disable the send button to stop user from attempting to send multiple messages at once
    sendButton.setDisable(true);
    // add the user message to the history
    chatCompletionRequest.addMessage(msg);
    // create a task to send the request to the GPT model
    try {
      javafx.concurrent.Task<Void> sendTask =
          new javafx.concurrent.Task<>() {
            @Override
            protected Void call() throws Exception {
              // send the request and get the response
              ChatCompletionResult chatCompletionResult = chatCompletionRequest.execute();
              Choice result = chatCompletionResult.getChoices().iterator().next();
              // add the response to the history
              chatCompletionRequest.addMessage(result.getChatMessage());
              // add the response to the chat text area on the main thread and enable the send
              // button
              Runnable addGptMessage = () -> appendChatMessage(result.getChatMessage());
              sendButton.setDisable(false);
              Platform.runLater(addGptMessage);
              // read the response out loud on a background thread
              javafx.concurrent.Task<Void> readMessageTask =
                  new javafx.concurrent.Task<>() {
                    @Override
                    protected Void call() throws Exception {
                      // read the message out loud
                      voice.speak(result.getChatMessage().getContent());
                      return null;
                    }
                  };

              new Thread(readMessageTask).start();
              // if the response is correct, show a popup and progress the game
              if (result.getChatMessage().getRole().equals("assistant")
                  && result.getChatMessage().getContent().startsWith("Correct")) {
                switch (App.firstRiddleAnswer) {
                  case "window":
                    popupTitle = "A small key is passed through the mail slot";
                    popupBody = "You pick it up. It's too small to fit in the door lock.";
                    break;
                  case "vase":
                    popupTitle = "A flower is passed through the mail slot";
                    popupBody = "You pick it up.";
                    break;
                }
                // show the popup on the main thread and switch back to the room window
                Runnable successPopup = () -> App.showDialog("Info", popupTitle, popupBody);
                App.setRoot(AppUi.ROOM);

                Platform.runLater(successPopup);
                GameState.taskProgress++;
              }
              return null;
            }
          };
      // begin running the task on a background thread
      new Thread(sendTask).start();

    } catch (Exception e) {
      // TODO handle exception appropriately
      e.printStackTrace();
    }
  }

  /**
   * Sends a message to the GPT model.
   *
   * @param event the action event triggered by the send button
   * @throws ApiProxyException if there is an error communicating with the API proxy
   * @throws IOException if there is an I/O error
   */
  @FXML
  private void onSendMessage(ActionEvent event) throws ApiProxyException, IOException {
    try {
      // reject empty messages
      String message = inputText.getText();
      if (message.trim().isEmpty()) {
        return;
      }
      inputText.clear();
      // add the message to the chat text area
      ChatMessage msg = new ChatMessage("user", message);
      appendChatMessage(msg);
      // run the GPT model with the message
      runGpt(msg);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  /**
   * Navigates back to the previous view.
   *
   * @param event the action event triggered by the go back button
   * @throws ApiProxyException if there is an error communicating with the API proxy
   * @throws IOException if there is an I/O error
   */
  @FXML
  private void onGoBack(ActionEvent event) throws ApiProxyException, IOException {
    App.setRoot(AppUi.ROOM);
  }
}
